{"version":3,"sources":["Login.js","UserPage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","useState","state","setState","useEffect","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","undefined","accessToken","console","log","localStorage","setItem","refreshToken","isLogined","catch","error","message","className","initialValues","email","password","validate","values","errors","test","onSubmit","setSubmitting","clientId","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Item","label","validateStatus","help","required","type","name","onChange","onBlur","value","htmlType","disabled","UserPage","logout","setLogout","getItem","success","clear","userProfile","size","onClick","App","isAuth","setIsAuth","setUserProfile","isLogin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecacd8f5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Formik } from 'formik';\r\nimport { Form, Input, Button, message } from 'antd';\r\n\r\nconst Login = (props) => {\r\n    const [state, setState] = useState()\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            const baseURL = 'https://tager.dev.ozitag.com/api/auth/user/';\r\n\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(state)\r\n            };\r\n\r\n            fetch(baseURL, requestOptions)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.data.accessToken !== undefined) {\r\n                        console.log('response login API', data)\r\n                        localStorage.setItem('accessToken', data.data.accessToken);\r\n                        localStorage.setItem('refreshToken', data.data.refreshToken);\r\n                        props.isLogined(true)\r\n                    }\r\n                })\r\n                .catch(function(error) {\r\n                    message.error('Введены не правельные данные');\r\n                });\r\n        }\r\n\r\n    }, [state, props])\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <Formik\r\n                initialValues={{ email: 'user@ozitag.com', password: 'user' }}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.email) {\r\n                        errors.email = 'Required';\r\n                    } else if (\r\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = 'Invalid email address';\r\n                    }\r\n\r\n                    if (!values.password) {\r\n                        errors.password = 'Required';\r\n                    }\r\n                    console.log('errors: ',errors)\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                    values.clientId = 1;\r\n                    console.log('onSubmit values: ', values)\r\n                    setState(values)\r\n                    setSubmitting(false);\r\n                }}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                    /* and other goodies */\r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Form.Item \r\n                            label=\"Email\" \r\n                            validateStatus={errors.email !== undefined ? \"error\" : \"\"}\r\n                            help={errors.email && touched.email && errors.email}\r\n                            required=\"true\"\r\n                        >\r\n                            <Input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.email}\r\n                            />\r\n                            \r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Password\"\r\n                            validateStatus={errors.password !== undefined ? \"error\" : \"\"}\r\n                            help={errors.password && touched.password && errors.password}\r\n                            required=\"true\"\r\n                        >\r\n                            <Input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                value={values.password}\r\n                            />\r\n                        </Form.Item>\r\n\r\n\r\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting}>\r\n                            Submit\r\n                        </Button>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect } from 'react';\r\nimport { Spin, Space, Button } from 'antd';\r\n\r\nconst UserPage = (props) => {\r\n    const [logout, setLogout] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (logout) {\r\n            const baseURL = 'https://tager.dev.ozitag.com/api/tager/user/profile/logout/';\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('accessToken')\r\n                },\r\n            };\r\n\r\n            fetch(baseURL, requestOptions)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.success) {\r\n                        props.isLogined(false)\r\n                        localStorage.clear()\r\n                    }\r\n                }\r\n                );\r\n        }\r\n    }, [logout, props])\r\n\r\n    const logoutHandle = () => {\r\n        setLogout(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!props.userProfile ?\r\n                <Space>\r\n                    <Spin size=\"large\" />\r\n                </Space>\r\n\r\n                :\r\n                <>\r\n                    <h4>UserPage</h4>\r\n                    <p>name: {props.userProfile.name}</p>\r\n                    <p>email: {props.userProfile.email}</p>\r\n                </>\r\n            }\r\n\r\n            <Button type=\"primary\" onClick={logoutHandle} >Выйти</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPage;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Login from './Login';\nimport UserPage from './UserPage';\n\nconst App = () => {\n  const [isAuth, setIsAuth] = useState(null);\n  const [userProfile, setUserProfile] = useState(false)\n\n  useEffect(() => {\n    if (isAuth === null || !userProfile) {\n      if (localStorage.getItem('accessToken')) {\n        const baseURL = 'https://tager.dev.ozitag.com/api/tager/user/profile/';\n            const requestOptions = {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + localStorage.getItem('accessToken')\n                },\n            };\n\n            fetch(baseURL, requestOptions)\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data)\n                        setUserProfile(data.data)\n                        setIsAuth(true)\n                    }\n                );\n      }\n    }\n  }, [isAuth])\n  \n  const isLogined = (isLogin) => {\n    setIsAuth(isLogin)\n  }\n \n  return (\n    <div className=\"container\">\n      {!isAuth ?\n        <Login isLogined = {isLogined} />\n      :\n        <UserPage isLogined = {isLogined} userProfile = {userProfile}/>\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}